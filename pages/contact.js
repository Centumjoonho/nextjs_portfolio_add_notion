import Layout from "../components/layout";
import Head from "next/head";
import { sendContactForm } from "../lib/api";

import React, { useState } from "react";
import {
  Text,
  Button,
  Container,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Input,
  Textarea,
  useToast,
} from "@chakra-ui/react";

const intiValue = { name: "", email: "", subject: "", message: "" };
const initState = { values: intiValue };

export default function Contact() {
  const toast = useToast();
  const [state, setState] = useState(initState);
  const [touched, setTouched] = useState({});

  const { values, isLoading, error } = state;

  const onBlur = ({ target }) =>
    setTouched((prev) => ({
      ...prev,
      [target.name]: true,
    }));

  const handlechange = ({ target }) =>
    setState((prev) => ({
      ...prev,
      values: {
        ...prev.values,
        [target.name]: target.value,
      },
    }));

  const onSubmit = async () => {
    setState((prev) => ({ ...prev, isLoading: true }));
    try {
      await sendContactForm(values);
      setTouched({});
      setState(initState);
      toast({
        title: "Message sent",
        status: "success",
        duration: 2000,
        position: "top",
      });
    } catch (error) {
      setState((prev) => ({ ...prev, isLoading: false, error: error.message }));
    }
  };
  return (
    <>
      <Layout>
        <div className="flex flex-col items-center justify-center min-h-screen px-6 py-10 mb-10">
          <Head>
            <title>센텀준호</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <Container maxW="450px" mt={12}>
            <Heading>Contact</Heading>
            {error && (
              <Text color="red.300" my={4} fontSize="xl">
                {error}
              </Text>
            )}
            <FormControl
              isRequired
              isInvalid={touched.name && !values.name}
              mb={5}
            >
              <FormLabel>Name</FormLabel>
              <Input
                type="text"
                name="name"
                errorBorderColor="red.300"
                value={values.name}
                onChange={handlechange}
                onBlur={onBlur}
              ></Input>
              <FormErrorMessage>Required</FormErrorMessage>
            </FormControl>
            <FormControl
              isRequired
              isInvalid={touched.email && !values.email}
              mb={5}
            >
              <FormLabel>Email</FormLabel>
              <Input
                type="email"
                name="email"
                errorBorderColor="red.300"
                value={values.email}
                onChange={handlechange}
                onBlur={onBlur}
              ></Input>
              <FormErrorMessage>Required</FormErrorMessage>
            </FormControl>
            <FormControl
              isRequired
              isInvalid={touched.subject && !values.subject}
              mb={5}
            >
              <FormLabel>Subject</FormLabel>
              <Input
                type="text"
                name="subject"
                errorBorderColor="red.300"
                value={values.subject}
                onChange={handlechange}
                onBlur={onBlur}
              ></Input>
              <FormErrorMessage>Required</FormErrorMessage>
            </FormControl>
            <FormControl
              isRequired
              isInvalid={touched.message && !values.message}
              mb={5}
            >
              <FormLabel>Message</FormLabel>
              <Textarea
                type="text"
                name="message"
                rows={4}
                errorBorderColor="red.300"
                value={values.message}
                onChange={handlechange}
                onBlur={onBlur}
              ></Textarea>
              <FormErrorMessage>Required</FormErrorMessage>
            </FormControl>
            <Button
              variant="outline"
              colorScheme="primary"
              isLoading={isLoading}
              disabled={
                !values.name ||
                !values.email ||
                !values.subject ||
                !values.message
              }
              onClick={onSubmit}
            >
              Submit
            </Button>
          </Container>
        </div>
      </Layout>
    </>
  );
}
